swagger: "2.0"
info:
  title: "Tamagochi API"
  description: "A documentação abaixo descreve o funcionamento da API do Tamagochi."
  version: "2.0.0"
host: "127.0.0.1:5000"
basePath: "/"
schemes:
  - "http"
tags:
  - name: "Auth"
    description: "Operations related to authentication"
  - name: "Parent"
    description: "Operations related to parents"
  - name: "Child"
    description: "Operations related to children"
  - name: "Task"
    description: "Operations related to tasks"
  - name: "Item"
    description: "Operations related to items"

paths:
  /auth/register:
    post:
      tags:
        - "Auth"
      summary: "Register a new user"
      description: "Register a new user with the provided credentials."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: User registration data
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              surname:
                type: string
              email:
                type: string
              password:
                type: string
              gender:
                type: string
            required:
              - name
              - surname
              - username
              - password
              - gender
      responses:
        200:
          description: "User registered successfully."
        400:
          description: "Invalid or incomplete data."

  /auth/login:
    post:
      tags:
        - "Auth"
      summary: "Login"
      description: "Authenticate the user and generate an access token."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: credentials
          description: User credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
            required:
              - username
              - password
      responses:
        200:
          description: "Login successful. Access token generated."
        401:
          description: "Authentication failed."

  /auth/logout:
    post:
      tags:
        - "Auth"
      summary: "Logout"
      description: "Invalidate the user's access token."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: "Logout successful."

  /parent/get_parent/{parent_id}:
    get:
      tags:
        - "Parent"
      summary: "Get parent by ID"
      description: "Retrieve details of a parent by ID."
      security:
        - BearerAuth: []  # Assuming Bearer token authentication
      parameters:
        - in: path
          name: parent_id
          required: true
          schema:
            type: integer
          description: "ID of the parent to retrieve"
      responses:
        '200':
          description: "Parent retrieved successfully."
        '401':
          description: "Unauthorized."
        '404':
          description: "Parent not found."
        '500':
          description: "Internal server error."

  /parent/get_all_parents:
    get:
      tags:
        - "Parent"
      summary: "Get all parents"
      description: "Retrieve details of all parents."
      security:
        - BearerAuth: []  # Assuming Bearer token authentication
      responses:
        '200':
          description: "Parents retrieved successfully."
        '401':
          description: "Unauthorized."
        '500':
          description: "Internal server error."

  /parent/create_child:
    post:
      tags:
        - "Parent"
      summary: "Create a child"
      description: "Create a new child for the authenticated parent."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: child
          description: Child data
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              surname:
                type: string
              gender:
                type: string
            required:
              - name
              - surname
              - gender
      responses:
        200:
          description: "Child created successfully."
        400:
          description: "Invalid or incomplete data."

  /parent/create_task:
    post:
      tags:
        - "Parent"
      summary: "Create a task"
      description: "Create a new task for the authenticated parent."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: task
          description: Task data
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              period:
                type: string
              frequency:
                type: string
              is_visible:
                type: boolean
            required:
              - name
              - description
              - period
              - frequency
      responses:
        200:
          description: "Task created successfully."
        400:
          description: "Invalid or incomplete data."

  /parent/assign_task_to_child:
    post:
      tags:
        - "Parent"
      summary: "Assign a task to a child"
      description: "Assign a task to a specific child."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: assignment
          description: Assignment data
          required: true
          schema:
            type: object
            properties:
              child_id:
                type: integer
              task_id:
                type: integer
            required:
              - child_id
              - task_id
      responses:
        200:
          description: "Task assigned to child successfully."
        400:
          description: "Invalid or incomplete data."
        500:
          description: "Internal server error."

  /child/get_child/{child_id}:
    get:
      tags:
        - "Child"
      summary: "Get a child"
      description: "Retrieve details of the authenticated child."
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: child_id
          required: true
          schema:
            type: integer
          description: "ID of the child to retrieve"
      responses:
        200:
          description: "Child details retrieved successfully."
        401:
          description: "Unauthorized."
        404:
          description: "Child not found."
        500:
          description: "Internal server error."

  /child/get_all_childs:
    get:
      tags:
        - "Child"
      summary: "Get all children"
      description: "Retrieve details of all children."
      security:
        - BearerAuth: []
      produces:
        - application/json
      responses:
        200:
          description: "All children retrieved successfully."
        401:
          description: "Unauthorized."
        500:
          description: "Internal server error."

  /child/update_child/{child_id}:
    put:
      tags:
        - "Child"
      summary: "Update a child"
      description: "Update details of the authenticated child."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: child_id
          required: true
          schema:
            type: integer
          description: "ID of the child to update"
        - in: body
          name: child
          description: Updated child data
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              surname:
                type: string
              gender:
                type: string
            required:
              - name
              - surname
              - gender
      responses:
        200:
          description: "Child updated successfully."
        401:
          description: "Unauthorized."
        400:
          description: "Invalid or incomplete data."
        404:
          description: "Child not found."
        500:
          description: "Internal server error."

  /child/delete_child/{child_id}:
    delete:
      tags:
        - "Child"
      summary: "Delete a child"
      description: "Delete the authenticated child."
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: child_id
          required: true
          schema:
          type: integer
          description: "ID of the child to delete"
      responses:
        200:
          description: "Child deleted successfully."
        401:
          description: "Unauthorized."
        404:
          description: "Child not found."
        500:
          description: "Internal server error."

  /task/get_task/{task_id}:
    get:
      tags:
        - "Task"
      summary: "Get a task by ID"
      description: "Retrieve details of a specific task by its ID."
      produces:
        - application/json
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: integer
          description: "ID of the task to retrieve"
      responses:
        200:
          description: "Task details retrieved successfully."
        404:
          description: "Task not found."
        500:
          description: "Internal server error."

  /task/get_all_tasks:
    get:
      tags:
        - "Task"
      summary: "Get all tasks"
      description: "Retrieve details of all tasks."
      produces:
        - application/json
      responses:
        200:
          description: "All tasks retrieved successfully."
        500:
          description: "Internal server error."

  /task/update_task/{task_id}:
    put:
      tags:
        - "Task"
      summary: "Update a task by ID"
      description: "Update details of a specific task by its ID."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: task_id
          description: "ID of the task to update"
          required: true
          type: integer
        - in: body
          name: task
          description: "Updated task data"
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              period:
                type: string
              frequency:
                type: string
              is_visible:
                type: boolean
      responses:
        200:
          description: "Task updated successfully."
        400:
          description: "Invalid or incomplete data."
        404:
          description: "Task not found."
        500:
          description: "Internal server error."

  /task/delete_task/{task_id}:
    delete:
      tags:
        - "Task"
      summary: "Delete a task by ID"
      description: "Delete a specific task by its ID."
      produces:
        - application/json
      parameters:
        - in: path
          name: task_id
          description: "ID of the task to delete"
          required: true
          type: integer
      responses:
        200:
          description: "Task deleted successfully."
        404:
          description: "Task not found."
        500:
          description: "Internal server error."
  
  /item/add_item:
    post:
      tags:
        - "Item"
      summary: 'Add a new item'
      description: 'Add a new item with details'
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: 'name'
          in: 'formData'
          required: true
          type: 'string'
          description: 'Name of the item'
        - name: 'type'
          in: 'formData'
          required: true
          type: 'string'
          description: 'Type of the item'
        - name: 'description'
          in: 'formData'
          required: true
          type: 'string'
          description: 'Description of the item'
        - name: 'image'
          in: 'formData'
          required: true
          type: 'file'
          description: 'Image of the item (large binary)'
        - name: 'price'
          in: 'formData'
          required: true
          type: 'number'
          format: 'float'
          description: 'Price of the item'
      responses:
        '201':
          description: 'Item added successfully'

  /item/get_item/{item_id}:
    get:
      tags:
        - "Item"
      summary: "Get an item by ID"
      description: "Retrieve details of a specific item by its ID."
      produces:
        - application/json
      parameters:
        - in: path
          name: item_id
          required: true
          schema:
            type: integer
          description: "ID of the item to retrieve"
      responses:
        200:
          description: "Item details retrieved successfully."
          schema:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              type:
                type: string
              description:
                type: string
              image:
                type: string
                format: base64
              price:
                type: number
          examples:
            application/json:
              id: 1
              name: "Item Name"
              type: "Item Type"
              description: "Item Description"
              image: "base64 image"
              price: 10.0
        404:
          description: "Item not found."
        500:
          description: "Internal server error."

  /item/get_all_items:
    get:
      tags:
        - "Item"
      summary: "Get all items"
      description: "Retrieve details of all items."
      produces:
        - application/json
        - multipart/form-data
      responses:
        200:
          description: "All items retrieved successfully."
        500:
          description: "Internal server error."

  /item/update_item/{item_id}:
    put:
      tags:
        - "Item"
      summary: "Update an item by ID"
      description: "Update details of a specific item by its ID."
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - in: path
          name: item_id
          required: true
          schema:
            type: 'integer'
          description: "ID of the item to update"
        - name: name
          in: 'formData'
          required: false
          type: 'string'
          description: "Name of the item"
        - name: 'type'
          in: 'formData'
          required: false
          type: 'string'
          description: "Type of the item"
        - name: 'description'
          in: 'formData'
          required: false
          type: 'string'
          description: "Description of the item"
        - name: 'price'
          in: 'formData'
          required: false
          type: 'number'
          format: 'float'
          description: "Price of the item"
        - name: 'image'
          in: 'formData'
          required: false
          type: 'file'
      responses:
        200:
          description: "Item updated successfully."
        400:
          description: "Invalid or incomplete data."
        404:
          description: "Item not found."
        500:
          description: "Internal server error."

  /item/delete_item/{item_id}:
    delete:
      tags:
        - "Item"
      summary: "Delete an item by ID"
      description: "Delete a specific item by its ID."
      produces:
        - application/json
      parameters:
        - in: path
          name: item_id
          description: "ID of the item to delete"
          required: true
          type: integer
      responses:
        200:
          description: "Item deleted successfully."
        404:
          description: "Item not found."
        500:
          description: "Internal server error."
