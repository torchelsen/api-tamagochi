swagger: "2.0"
info:
  title: "Tamagochi API"
  description: "A documentação abaixo descreve o funcionamento da API do Tamagochi."
  version: "2.0.0"
host: "127.0.0.1:5000"
basePath: "/"
schemes:
  - "http"
tags:
  - name: "Auth"
    description: "Operations related to authentication"
  - name: "Parent"
    description: "Operations related to parents"
  - name: "Child"
    description: "Operations related to children"
  - name: "Task"
    description: "Operations related to tasks"
  - name: "ChildTask"
    description: "Operations related to child_tasks"
  - name: "Item"
    description: "Operations related to items"
  - name: "StyleTamagochi"
    description: "Operations related to style_tamagochis"
  - name: "Tamagochi"
    description: "Operations related to tamagochis"
  - name: "Inventory"
    description: "Operations related to inventories"
  - name: "Reward"
    description: "Operations related to rewards"
  - name: "TaskReward"
    description: "Operations related to task_rewards"
  - name: "LogReward"
    description: "Operations related to log_rewards"
  - name: "Mood"
    description: "Operations related to moods"

paths:
  /auth/register:
    post:
      tags:
        - "Auth"
      summary: "Register a new user"
      description: "Register a new user with the provided credentials."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: User registration data
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              surname:
                type: string
              email:
                type: string
              password:
                type: string
              gender:
                type: string
            required:
              - name
              - surname
              - username
              - password
              - gender
      responses:
        200:
          description: "User registered successfully."
        400:
          description: "Invalid or incomplete data."

  /auth/login:
    post:
      tags:
        - "Auth"
      summary: "Login"
      description: "Authenticate the user and generate an access token."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: credentials
          description: User credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
            required:
              - username
              - password
      responses:
        200:
          description: "Login successful. Access token generated."
        401:
          description: "Authentication failed."

  /auth/logout:
    post:
      tags:
        - "Auth"
      summary: "Logout"
      description: "Invalidate the user's access token."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: "Logout successful."

  /parent/get_parent/{parent_id}:
    get:
      tags:
        - "Parent"
      summary: "Get parent by ID"
      description: "Retrieve details of a parent by ID."
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: parent_id
          required: true
          schema:
            type: integer
          description: "ID of the parent to retrieve"
      responses:
        '200':
          description: "Parent retrieved successfully."
        '401':
          description: "Unauthorized."
        '404':
          description: "Parent not found."
        '500':
          description: "Internal server error."

  /parent/get_all_parents:
    get:
      tags:
        - "Parent"
      summary: "Get all parents"
      description: "Retrieve details of all parents."
      security:
        - BearerAuth: []  
      responses:
        '200':
          description: "Parents retrieved successfully."
        '401':
          description: "Unauthorized."
        '500':
          description: "Internal server error."

  /parent/create_child:
    post:
      tags:
        - "Parent"
      summary: "Create a child"
      description: "Create a new child for the authenticated parent."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: child
          description: Child data
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              surname:
                type: string
              gender:
                type: string
            required:
              - name
              - surname
              - gender
      responses:
        200:
          description: "Child created successfully."
        400:
          description: "Invalid or incomplete data."

  /parent/create_task:
    post:
      tags:
        - "Parent"
      summary: "Create a task"
      description: "Create a new task for the authenticated parent."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: task
          description: Task data
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              start_date:
                type: string
                format: date-time
                description: 'Example: 2023-12-02T23:41:55Z'
              duration:
                type: string
                format: time
                description: 'Example: 22:12'
              repeat_days:
                type: array
                items:
                  type: integer
                description: List of days to repeat the task (e.g., [1, 3, 5] for Monday, Wednesday, Friday)
              day:
                type: integer
              is_visible:
                type: boolean
              is_repeatable:
                type: boolean
            required:
              - name
              - description
              - start_date
              - duration
              - day
              - is_repeatable
      responses:
        200:
          description: "Task created successfully."
        400:
          description: "Invalid or incomplete data."

  /parent/assign_task_to_child:
    post:
      tags:
        - "Parent"
      summary: "Assign a task to a child"
      description: "Assign a task to a specific child."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: assignment
          description: Assignment data
          required: true
          schema:
            type: object
            properties:
              task_id:
                type: integer
            required:
              - task_id
      responses:
        200:
          description: "Task assigned to child successfully."
        400:
          description: "Invalid or incomplete data."
        500:
          description: "Internal server error."

  /child/get_child/{child_id}:
    get:
      tags:
        - "Child"
      summary: "Get a child"
      description: "Retrieve details of the authenticated child."
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: child_id
          required: true
          schema:
            type: integer
          description: "ID of the child to retrieve"
      responses:
        200:
          description: "Child details retrieved successfully."
        401:
          description: "Unauthorized."
        404:
          description: "Child not found."
        500:
          description: "Internal server error."

  /child/get_all_children:
    get:
      tags:
        - "Child"
      summary: "Get all children"
      description: "Retrieve details of all children."
      security:
        - BearerAuth: []
      produces:
        - application/json
      responses:
        200:
          description: "All children retrieved successfully."
        401:
          description: "Unauthorized."
        500:
          description: "Internal server error."

  /child/update_child/{child_id}:
    put:
      tags:
        - "Child"
      summary: "Update a child"
      description: "Update details of the authenticated child."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: child_id
          required: true
          schema:
            type: integer
          description: "ID of the child to update"
        - in: body
          name: child
          description: Updated child data
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              surname:
                type: string
              gender:
                type: string
            required:
              - name
              - surname
              - gender
      responses:
        200:
          description: "Child updated successfully."
        401:
          description: "Unauthorized."
        400:
          description: "Invalid or incomplete data."
        404:
          description: "Child not found."
        500:
          description: "Internal server error."

  /child/delete_child/{child_id}:
    delete:
      tags:
        - "Child"
      summary: "Delete a child"
      description: "Delete the authenticated child."
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: child_id
          required: true
          schema:
          type: integer
          description: "ID of the child to delete"
      responses:
        200:
          description: "Child deleted successfully."
        401:
          description: "Unauthorized."
        404:
          description: "Child not found."
        500:
          description: "Internal server error."

  /child_task/get_child_task/{child_task_id}:
    get:
      tags:
        - "ChildTask"
      summary: "Get a child_task"
      description: "Retrieve details of the authenticated child_task."
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: child_task_id
          required: true
          schema:
            type: integer
          description: "ID of the child_task to retrieve"
      responses:
        200:
          description: "ChildTask details retrieved successfully."
        401:
          description: "Unauthorized."
        404:
          description: "ChildTask not found."
        500:
          description: "Internal server error."

  /child_task/get_all_child_tasks:
    get:
      tags:
        - "ChildTask"
      summary: "Get all child_tasks"
      description: "Retrieve details of all child_tasks."
      security:
        - BearerAuth: []
      produces:
        - application/json
      responses:
        200:
          description: "All child_tasks retrieved successfully."
        401:
          description: "Unauthorized."
        500:
          description: "Internal server error."

  /child_task/update_child_task/{child_task_id}:
    put:
      tags:
        - "ChildTask"
      summary: "Update a child_task"
      description: "Update details of the authenticated child_task."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: child_task_id
          required: true
          schema:
            type: integer
          description: "ID of the child_task to update"
        - in: body
          name: child_task
          description: Updated child_task data
          required: true
          schema:
            type: object
            properties:
              child_id:
                type: number
              task_id:
                type: number
              done:
                type: number
            required:
              - child_id
              - task_id
              - number
      responses:
        200:
          description: "ChildTask updated successfully."
        401:
          description: "Unauthorized."
        400:
          description: "Invalid or incomplete data."
        404:
          description: "ChildTask not found."
        500:
          description: "Internal server error."

  /child_task/delete_child_task/{child_task_id}:
    delete:
      tags:
        - "ChildTask"
      summary: "Delete a child_task"
      description: "Delete the authenticated child_task."
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: child_task_id
          required: true
          schema:
          type: integer
          description: "ID of the child_task to delete"
      responses:
        200:
          description: "child_task deleted successfully."
        401:
          description: "Unauthorized."
        404:
          description: "child_task not found."
        500:
          description: "Internal server error."

  /task/get_task/{task_id}:
    get:
      tags:
        - "Task"
      summary: "Get a task by ID"
      description: "Retrieve details of a specific task by its ID."
      produces:
        - application/json
      parameters:
        - in: path
          name: task_id
          required: true
          schema:
            type: integer
          description: "ID of the task to retrieve"
      responses:
        200:
          description: "Task details retrieved successfully."
        404:
          description: "Task not found."
        500:
          description: "Internal server error."

  /task/get_all_tasks:
    get:
      tags:
        - "Task"
      summary: "Get all tasks"
      description: "Retrieve details of all tasks."
      produces:
        - application/json
      responses:
        200:
          description: "All tasks retrieved successfully."
        500:
          description: "Internal server error."

  /task/update_task/{task_id}:
    put:
      tags:
        - "Task"
      summary: "Update a task by ID"
      description: "Update details of a specific task by its ID."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: task_id
          description: "ID of the task to update"
          required: true
          type: integer
        - in: body
          name: task
          description: "Updated task data"
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              start_date:
                type: string
                format: date-time
              duration:
                type: string
                format: time
              day:
                type: integer
              is_visible:
                type: boolean
              is_repeatable:
                type: boolean
      responses:
        200:
          description: "Task updated successfully."
        400:
          description: "Invalid or incomplete data."
        404:
          description: "Task not found."
        500:
          description: "Internal server error."
    
  /task/update_all_tasks/{task_id}:
    put:
      tags:
        - "Task"
      summary: "Update a task and its child tasks by ID"
      description: "Update details of a specific task and its child tasks by its ID."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: task_id
          description: "ID of the task to update"
          required: true
          type: integer
        - in: body
          name: task
          description: "Updated task data"
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              start_date:
                type: string
                format: date-time
              duration:
                type: string
                format: time
              is_visible:
                type: boolean
      responses:
        200:
          description: "Task and its child tasks updated successfully."
        400:
          description: "Invalid or incomplete data."
        404:
          description: "Task not found."
        500:
          description: "Internal server error."

  /task/delete_task/{task_id}:
    delete:
      tags:
        - "Task"
      summary: "Delete a task by ID"
      description: "Delete a specific task by its ID."
      produces:
        - application/json
      parameters:
        - in: path
          name: task_id
          description: "ID of the task to delete"
          required: true
          type: integer
      responses:
        200:
          description: "Task deleted successfully."
        404:
          description: "Task not found."
        500:
          description: "Internal server error."
  
  /task/delete_all_tasks/{task_id}:
    delete:
      tags:
        - "Task"
      summary: "Delete a task and its child tasks by ID"
      description: "Delete details of a specific task and its child tasks by its ID."
      produces:
        - application/json
      parameters:
        - in: path
          name: task_id
          description: "ID of the parent task to delete"
          required: true
          type: integer
      responses:
        200:
          description: "Tasks deleted successfully."
        404:
          description: "Tasks not found."
        500:
          description: "Internal server error."

  /task/complete_task/{task_id}:
    put:
      tags:
        - "Task"
      summary: "Mark task as completed"
      description: "Update the complete status of a specific task by its ID."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: task_id
          description: "ID of the task to complete"
          required: true
          type: integer
      responses:
        200:
          description: "Task status updated successfully."
        400:
          description: "Invalid or incomplete data."
        404:
          description: "Task not found."
        500:
          description: "Internal server error."
  
  /item/create_item:
    post:
      tags:
        - "Item"
      summary: 'Add a new item'
      description: 'Add a new item with details'
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: 'name'
          in: 'formData'
          required: true
          type: 'string'
          description: 'Name of the item'
        - name: 'type'
          in: 'formData'
          required: true
          type: 'string'
          description: 'Type of the item'
        - name: 'description'
          in: 'formData'
          required: true
          type: 'string'
          description: 'Description of the item'
        - name: 'image'
          in: 'formData'
          required: true
          type: 'file'
          description: 'Image of the item (large binary)'
        - name: 'price'
          in: 'formData'
          required: true
          type: 'number'
          format: 'float'
          description: 'Price of the item'
      responses:
        '201':
          description: 'Item added successfully'

  /item/get_item/{item_id}:
    get:
      tags:
        - "Item"
      summary: "Get an item by ID"
      description: "Retrieve details of a specific item by its ID."
      produces:
        - application/json
      parameters:
        - in: path
          name: item_id
          required: true
          schema:
            type: integer
          description: "ID of the item to retrieve"
      responses:
        200:
          description: "Item details retrieved successfully."
          schema:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              type:
                type: string
              description:
                type: string
              image:
                type: string
                format: base64
              price:
                type: number
          examples:
            application/json:
              id: 1
              name: "Item Name"
              type: "Item Type"
              description: "Item Description"
              image: "base64 image"
              price: 10.0
        404:
          description: "Item not found."
        500:
          description: "Internal server error."

  /item/get_all_items:
    get:
      tags:
        - "Item"
      summary: "Get all items"
      description: "Retrieve details of all items."
      produces:
        - application/json
        - multipart/form-data
      responses:
        200:
          description: "All items retrieved successfully."
        500:
          description: "Internal server error."

  /item/update_item/{item_id}:
    put:
      tags:
        - "Item"
      summary: "Update an item by ID"
      description: "Update details of a specific item by its ID."
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - in: path
          name: item_id
          required: true
          schema:
            type: 'integer'
          description: "ID of the item to update"
        - name: name
          in: 'formData'
          required: false
          type: 'string'
          description: "Name of the item"
        - name: 'type'
          in: 'formData'
          required: false
          type: 'string'
          description: "Type of the item"
        - name: 'description'
          in: 'formData'
          required: false
          type: 'string'
          description: "Description of the item"
        - name: 'price'
          in: 'formData'
          required: false
          type: 'number'
          format: 'float'
          description: "Price of the item"
        - name: 'image'
          in: 'formData'
          required: false
          type: 'file'
      responses:
        200:
          description: "Item updated successfully."
        400:
          description: "Invalid or incomplete data."
        404:
          description: "Item not found."
        500:
          description: "Internal server error."

  /item/delete_item/{item_id}:
    delete:
      tags:
        - "Item"
      summary: "Delete an item by ID"
      description: "Delete a specific item by its ID."
      produces:
        - application/json
      parameters:
        - in: path
          name: item_id
          description: "ID of the item to delete"
          required: true
          type: integer
      responses:
        200:
          description: "Item deleted successfully."
        404:
          description: "Item not found."
        500:
          description: "Internal server error."

  /style_tamagochi/add_style_tamagochi:
    post:
      tags:
        - "StyleTamagochi"
      summary: "Add a tamagochi style"
      description: "Create a new tamagochi style for the authenticated parent."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: style_tamagochi
          description: StyleTamagochi data
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              head:
                type: number
              chest:
                type: number
              feet:
                type: number
              glasses:
                type: number
              scenario:
                type: number
            required:
              - name
      responses:
        200:
          description: "Style Tamagochi added successfully."
        400:
          description: "Invalid or incomplete data."

  /style_tamagochi/get_style_tamagochi/{style_tamagochi_id}:
    get:
      tags:
        - "StyleTamagochi"
      summary: "Get a style_tamagochi"
      description: "Retrieve details of specific style_tamagochi by ID."
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: style_tamagochi_id
          required: true
          schema:
            type: integer
          description: "ID of the style_tamagochi to retrieve"
      responses:
        200:
          description: "StyleTamagochi details retrieved successfully."
        401:
          description: "Unauthorized."
        404:
          description: "StyleTamagochi not found."
        500:
          description: "Internal server error."

  /style_tamagochi/get_all_style_tamagochis:
    get:
      tags:
        - "StyleTamagochi"
      summary: "Get all style_tamagochis"
      description: "Retrieve details of all style_tamagochis."
      security:
        - BearerAuth: []
      produces:
        - application/json
      responses:
        200:
          description: "All style_tamagochis retrieved successfully."
        401:
          description: "Unauthorized."
        500:
          description: "Internal server error."

  /style_tamagochi/update_style_tamagochi/{style_tamagochi_id}:
    put:
      tags:
        - "StyleTamagochi"
      summary: "Update a style_tamagochi"
      description: "Update details of specific style_tamagochi."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: style_tamagochi_id
          required: true
          schema:
            type: integer
          description: "ID of the style_tamagochi to update"
        - in: body
          name: style_tamagochi
          description: Update tamagochi data
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              head:
                type: number
              chest:
                type: number
              feet:
                type: number
              glasses:
                type: number
              scenario:
                type: number
      responses:
        200:
          description: "StyleTamagochi updated successfully."
        401:
          description: "Unauthorized."
        400:
          description: "Invalid or incomplete data."
        404:
          description: "StyleTamagochi not found."
        500:
          description: "Internal server error."

  /style_tamagochi/delete_style_tamagochi/{style_tamagochi_id}:
    delete:
      tags:
        - "StyleTamagochi"
      summary: "Delete a style_tamagochi"
      description: "Delete specific style_tamagochi by ID."
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: style_tamagochi_id
          required: true
          schema:
          type: integer
          description: "ID of the style_tamagochi to delete"
      responses:
        200:
          description: "StyleTamagochi deleted successfully."
        401:
          description: "Unauthorized."
        404:
          description: "StyleTamagochi not found."
        500:
          description: "Internal server error."

  /tamagochi/create_tamagochi:
    post:
      tags:
        - "Tamagochi"
      summary: "Create a tamagochi"
      description: "Create a new Tamagochi for the authenticated parent."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: tamagochi
          description: Tamagochi data
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              growth:
                type: number
              style_tamagochi_id:
                type: number
            required:
              - name
              - growth
              - style_tamagochi_id
      responses:
        200:
          description: "Child created successfully."
        400:
          description: "Invalid or incomplete data."

  /tamagochi/get_tamagochi/{tamagochi_id}:
    get:
      tags:
        - "Tamagochi"
      summary: "Get a tamagochi"
      description: "Retrieve details of specific tamagochi by ID."
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: tamagochi_id
          required: true
          schema:
            type: integer
          description: "ID of the tamagochi to retrieve"
      responses:
        200:
          description: "Tamagochi details retrieved successfully."
        401:
          description: "Unauthorized."
        404:
          description: "Tamagochi not found."
        500:
          description: "Internal server error."

  /tamagochi/get_all_tamagochis:
    get:
      tags:
        - "Tamagochi"
      summary: "Get all tamagochis"
      description: "Retrieve details of all tamagochis."
      security:
        - BearerAuth: []
      produces:
        - application/json
      responses:
        200:
          description: "All tamagochis retrieved successfully."
        401:
          description: "Unauthorized."
        500:
          description: "Internal server error."

  /tamagochi/update_tamagochi/{tamagochi_id}:
    put:
      tags:
        - "Tamagochi"
      summary: "Update a tamagochi"
      description: "Update details of specific tamagochi."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: tamagochi_id
          required: true
          schema:
            type: integer
          description: "ID of the tamagochi to update"
        - in: body
          name: tamagochi
          description: Update tamagochi data
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              growth:
                type: number
              style_tamagochi_id:
                type: number
            required:
              - name
              - growth
              - child_id
              - style_tamagochi_id
      responses:
        200:
          description: "Tamagochi updated successfully."
        401:
          description: "Unauthorized."
        400:
          description: "Invalid or incomplete data."
        404:
          description: "Tamagochi not found."
        500:
          description: "Internal server error."

  /tamagochi/delete_tamagochi/{tamagochi_id}:
    delete:
      tags:
        - "Tamagochi"
      summary: "Delete a tamagochi"
      description: "Delete specific tamagochi by ID."
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: tamagochi_id
          required: true
          schema:
          type: integer
          description: "ID of the tamagochi to delete"
      responses:
        200:
          description: "Tamagochi deleted successfully."
        401:
          description: "Unauthorized."
        404:
          description: "Tamagochi not found."
        500:
          description: "Internal server error."

  /inventory/add_to_inventory:
    post:
      tags:
        - "Inventory"
      summary: "Add items to inventory"
      description: "Add items to the authenticated child."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: inventory
          description: Inventory data
          required: true
          schema:
            type: object
            properties:
              item_id:
                type: number
            required:
              - item_id
      responses:
        200:
          description: "Item added to inventory successfully."
        400:
          description: "Invalid or incomplete data."

  /inventory/get_inventory/{inventory_id}:
    get:
      tags:
        - "Inventory"
      summary: "Get a inventory"
      description: "Retrieve details of specific inventory by ID."
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: inventory_id
          required: true
          schema:
            type: integer
          description: "ID of the inventory to retrieve"
      responses:
        200:
          description: "Inventory details retrieved successfully."
        401:
          description: "Unauthorized."
        404:
          description: "Inventory not found."
        500:
          description: "Internal server error."

  /inventory/get_all_inventories_by_child:
    get:
      tags:
        - "Inventory"
      summary: "Get all inventories by child."
      description: "Retrieve details of all inventories."
      security:
        - BearerAuth: []
      produces:
        - application/json
      responses:
        200:
          description: "All inventories retrieved successfully."
        401:
          description: "Unauthorized."
        500:
          description: "Internal server error."

  /inventory/update_inventory/{inventory_id}:
    put:
      tags:
        - "Inventory"
      summary: "Update a inventory"
      description: "Update details of specific inventory."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: inventory_id
          required: true
          schema:
            type: integer
          description: "ID of the inventory to update"
        - in: body
          name: inventory
          description: Update inventory data
          required: true
          schema:
            type: object
            properties:
              item_id:
                type: number
            required:
              - item_id
      responses:
        200:
          description: "Inventory updated successfully."
        401:
          description: "Unauthorized."
        400:
          description: "Invalid or incomplete data."
        404:
          description: "Inventory not found."
        500:
          description: "Internal server error."

  /inventory/delete_inventory/{inventory_id}:
    delete:
      tags:
        - "Inventory"
      summary: "Delete a inventory"
      description: "Delete specific inventory by ID."
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: inventory_id
          required: true
          schema:
          type: integer
          description: "ID of the inventory to delete"
      responses:
        200:
          description: "Inventory deleted successfully."
        401:
          description: "Unauthorized."
        404:
          description: "Inventory not found."
        500:
          description: "Internal server error."

  /reward/create_reward:
    post:
      tags:
        - "Reward"
      summary: "Add items to Reward"
      description: "Add items to the authenticated child."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: reward
          description: reward data
          required: true
          schema:
            type: object
            properties:
              type:
                type: number
              value:
                type: number
              description:
                type: string
            required:
              - type
              - value
              - description
      responses:
        200:
          description: "Reward created sucessfully."
        400:
          description: "Invalid or incomplete data."

  /reward/get_reward/{reward_id}:
    get:
      tags:
        - "Reward"
      summary: "Get a reward"
      description: "Retrieve details of specific reward by ID."
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: reward_id
          required: true
          schema:
            type: integer
          description: "ID of the reward to retrieve"
      responses:
        200:
          description: "Reward details retrieved successfully."
        401:
          description: "Unauthorized."
        404:
          description: "Reward not found."
        500:
          description: "Internal server error."

  /reward/get_all_rewards:
    get:
      tags:
        - "Reward"
      summary: "Get all rewards."
      description: "Retrieve all rewards."
      security:
        - BearerAuth: []
      produces:
        - application/json
      responses:
        200:
          description: "All rewards retrieved successfully."
        401:
          description: "Unauthorized."
        500:
          description: "Internal server error."

  /reward/update_reward/{reward_id}:
    put:
      tags:
        - "Reward"
      summary: "Update a reward"
      description: "Update details of specific reward."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: reward_id
          required: true
          schema:
            type: integer
          description: "ID of the reward to update"
        - in: body
          name: reward
          description: Update reward data
          required: true
          schema:
            type: object
            properties:
              type:
                type: number
              value:
                type: number
              description:
                type: string
            required:
              - item_id
      responses:
        200:
          description: "Reward updated successfully."
        401:
          description: "Unauthorized."
        400:
          description: "Invalid or incomplete data."
        404:
          description: "Reward not found."
        500:
          description: "Internal server error."

  /reward/delete_reward/{reward_id}:
    delete:
      tags:
        - "Reward"
      summary: "Delete a reward."
      description: "Delete specific reward by ID."
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: reward_id
          required: true
          schema:
          type: integer
          description: "ID of the reward to delete"
      responses:
        200:
          description: "Reward deleted successfully."
        401:
          description: "Unauthorized."
        404:
          description: "Reward not found."
        500:
          description: "Internal server error."

  /task_reward/add_task_reward:
    post:
      tags:
        - "TaskReward"
      summary: "Add task_reward"
      description: "Create relationship between task and reward."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: task_reward
          description: TaskReward data
          required: true
          schema:
            type: object
            properties:
              reward_id:
                type: number
              task_id:
                type: number
            required:
              - reward_id
              - task_id
      responses:
        200:
          description: "TaskReward added sucessfully."
        400:
          description: "Invalid or incomplete data."

  /task_reward/get_task_reward/{task_reward_id}:
    get:
      tags:
        - "TaskReward"
      summary: "Get a task_reward"
      description: "Retrieve details of specific task_reward by ID."
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: task_reward_id
          required: true
          schema:
            type: integer
          description: "ID of the task_reward to retrieve"
      responses:
        200:
          description: "TaskReward details retrieved successfully."
        401:
          description: "Unauthorized."
        404:
          description: "TaskRewards not found."
        500:
          description: "Internal server error."

  /task_reward/get_all_task_rewards:
    get:
      tags:
        - "TaskReward"
      summary: "Get all task_rewards."
      description: "Retrieve all task_rewards."
      security:
        - BearerAuth: []
      produces:
        - application/json
      responses:
        200:
          description: "All task_rewards retrieved successfully."
        401:
          description: "Unauthorized."
        500:
          description: "Internal server error."

  /task_reward/update_task_reward/{task_reward_id}:
    put:
      tags:
        - "TaskReward"
      summary: "Update a task_reward"
      description: "Update details of specific task_reward."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: task_reward_id
          required: true
          schema:
            type: integer
          description: "ID of the task_reward to update"
        - in: body
          name: task_reward
          description: Update task_reward data
          required: true
          schema:
            type: object
            properties:
              reward_id:
                type: number
              task_id:
                type: number
            required:
              - reward_id
              - task_id
      responses:
        200:
          description: "TaskReward updated successfully."
        401:
          description: "Unauthorized."
        400:
          description: "Invalid or incomplete data."
        404:
          description: "TaskReward not found."
        500:
          description: "Internal server error."

  /task_reward/delete_task_reward/{task_reward_id}:
    delete:
      tags:
        - "TaskReward"
      summary: "Delete a task_reward."
      description: "Delete specific task_reward by ID."
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: task_reward_id
          required: true
          schema:
          type: integer
          description: "ID of the task_reward to delete"
      responses:
        200:
          description: "TaskReward deleted successfully."
        401:
          description: "Unauthorized."
        404:
          description: "TaskReward not found."
        500:
          description: "Internal server error."

  /log_reward/add_log_reward:
    post:
      tags:
        - "LogReward"
      summary: "Create a LogReward"
      description: "Create a new LogReward."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: LogReward
          description: LogReward data
          required: true
          schema:
            type: object
            properties:
              reward_id:
                type: number
              child_id:
                type: number
            required:
              - reward_id
              - child_id
      responses:
        200:
          description: "LogReward created successfully."
        400:
          description: "Invalid or incomplete data."

  /log_reward/get_log_reward/{log_reward_id}:
    get:
      tags:
        - "LogReward"
      summary: "Get a LogReward"
      description: "Retrieve details of specific log_reward"
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: log_reward_id
          required: true
          schema:
            type: integer
          description: "ID of the log_reward to retrieve"
      responses:
        200:
          description: "Log details retrieved successfully."
        401:
          description: "Unauthorized."
        404:
          description: "Log not found."
        500:
          description: "Internal server error."

  /log_reward/get_all_log_rewards:
    get:
      tags:
        - "LogReward"
      summary: "Get all log_rewards"
      description: "Retrieve details of all log_rewards."
      security:
        - BearerAuth: []
      produces:
        - application/json
      responses:
        200:
          description: "All log_rewards retrieved successfully."
        401:
          description: "Unauthorized."
        500:
          description: "Internal server error."

  /log_reward/update_log_reward/{log_reward_id}:
    put:
      tags:
        - "LogReward"
      summary: "Update a log_reward"
      description: "Update details of the specific log_reward."
      security:
        - BearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: log_reward_id
          required: true
          schema:
            type: integer
          description: "ID of the log_reward to update"
        - in: body
          name: log_reward
          description: Updated log_reward data
          required: true
          schema:
            type: object
            properties:
              reward_id:
                type: number
              child_id:
                type: number
            required:
              - reward_id
              - child_id
      responses:
        200:
          description: "Log updated successfully."
        401:
          description: "Unauthorized."
        400:
          description: "Invalid or incomplete data."
        404:
          description: "Log not found."
        500:
          description: "Internal server error."

  /log_reward/delete_log_reward/{log_reward_id}:
    delete:
      tags:
        - "LogReward"
      summary: "Delete a log_reward"
      description: "Delete the authenticated log_reward."
      security:
        - BearerAuth: []
      produces:
        - application/json
      parameters:
        - in: path
          name: log_reward_id
          required: true
          schema:
          type: integer
          description: "ID of the log_reward to delete"
      responses:
        200:
          description: "Log deleted successfully."
        401:
          description: "Unauthorized."
        404:
          description: "Log not found."
        500:
          description: "Internal server error."

  /mood/add_mood:
    post:
      tags:
        - "Mood"
      summary: 'Add a new mood'
      description: 'Add a new mood with details'
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: 'name'
          in: 'formData'
          required: true
          type: 'string'
          description: 'Name of the mood'
        - name: 'category'
          in: 'formData'
          required: true
          type: 'string'
          description: 'Category of the mood'
        - name: 'image'
          in: 'formData'
          required: true
          type: 'file'
          description: 'Image of the mood (large binary)'
      responses:
        '201':
          description: 'Mood added successfully'

  /mood/get_mood/{mood_id}:
    get:
      tags:
        - "Mood"
      summary: "Get an mood by ID"
      description: "Retrieve details of a specific mood by its ID."
      produces:
        - application/json
      parameters:
        - in: path
          name: mood_id
          required: true
          schema:
            type: integer
          description: "ID of the mood to retrieve"
      responses:
        200:
          description: "Mood details retrieved successfully."
          schema:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              category:
                type: string
              image:
                type: string
                format: base64
          examples:
            application/json:
              id: 1
              name: "mood Name"
              category: "mood category"
              image: "base64 image"
        404:
          description: "mood not found."
        500:
          description: "Internal server error."

  /mood/get_all_moods:
    get:
      tags:
        - "Mood"
      summary: "Get all moods"
      description: "Retrieve details of all moods."
      produces:
        - application/json
        - multipart/form-data
      responses:
        200:
          description: "All moods retrieved successfully."
        500:
          description: "Internal server error."

  /mood/update_mood/{mood_id}:
    put:
      tags:
        - "Mood"
      summary: "Update an mood by ID"
      description: "Update details of a specific mood by its ID."
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - in: path
          name: mood_id
          required: true
          schema:
            type: 'integer'
          description: "ID of the mood to update"
        - name: 'name'
          in: 'formData'
          required: false
          type: 'string'
          description: "Name of the mood"
        - name: 'category'
          in: 'formData'
          required: false
          type: 'string'
          description: "Category of the mood"
        - name: 'image'
          in: 'formData'
          required: false
          type: 'file'
      responses:
        200:
          description: "Mood updated successfully."
        400:
          description: "Invalid or incomplete data."
        404:
          description: "Mood not found."
        500:
          description: "Internal server error."

  /mood/delete_mood/{mood_id}:
    delete:
      tags:
        - "Mood"
      summary: "Delete an mood by ID"
      description: "Delete a specific mood by its ID."
      produces:
        - application/json
      parameters:
        - in: path
          name: mood_id
          description: "ID of the mood to delete"
          required: true
          type: integer
      responses:
        200:
          description: "Mood deleted successfully."
        404:
          description: "Mood not found."
        500:
          description: "Internal server error."

